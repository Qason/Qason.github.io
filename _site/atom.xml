<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom"><generator uri="http://jekyllrb.com" version="3.1.6">Jekyll</generator><link href="/atom.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" /><updated>2018-04-27T19:43:59+08:00</updated><id>/</id><title>Qason Blog</title><subtitle>Linux  devops</subtitle><entry><title>Facebook OnlineSchemaChange 再开源和改进介绍</title><link href="/mysql/open_source_osc/" rel="alternate" type="text/html" title="Facebook OnlineSchemaChange 再开源和改进介绍" /><published>2017-05-05T00:00:00+08:00</published><updated>2017-05-05T00:00:00+08:00</updated><id>/mysql/open_source_osc</id><content type="html" xml:base="/mysql/open_source_osc/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;设计初衷和困境&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;变化和改进&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-6&quot; id=&quot;markdown-toc-section-6&quot;&gt;项目的展望&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;本文会简要介绍，OnlineSchemaChange在经历从PHP到Python重写后的改进和变化&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;文章欢迎转载，但转载时请保留本段文字，并置于文章的顶部
作者：卢钧轶(cenalulu)
本文原文地址：&lt;a href=&quot;http://cenalulu.github.io/mysql/open_source_osc/&quot;&gt;http://cenalulu.github.io/mysql/open_source_osc/&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;section&quot;&gt;前言&lt;/h3&gt;

&lt;p&gt;Facebook早在2009年就开源了OnlineSchemaChange.php.  该工具主要设计初衷是用于补充当时MySQL对于在线表结构变更支持的空白，尽可能的减少表结构变更时对业务的影响。而在过去的几个月中这个工具经历了从PHP到Python重写，以及功能的新增和性能的改进。今天，重写后的OnlineSchemaChange正式宣布开源，可通过此链接访问：&lt;a href=&quot;https://github.com/facebookincubator/OnlineSchemaChange&quot;&gt;https://github.com/facebookincubator/OnlineSchemaChange&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;设计初衷和困境&lt;/h2&gt;

&lt;p&gt;最早，OSC是为了解决MySQL在进行表结构变更时锁表所带来的业务影响。同时，它也满足一部分DDL无法提供的功能。例如：&lt;code class=&quot;highlighter-rouge&quot;&gt;ALTER TABLE IGNORE ... ENGINE=INNODB&lt;/code&gt;。
然而在PHP的使用过程中我们发现设计上缺陷和程序编写方式的问题导致这个工具的可扩展性较差，并且无法更好的进行功能测试。随着时间的积累，往这个工具增加新功能的难度越来越高，甚至修复bug都成了一个不可能完成的任务。同时功能测试的缺失也成为了吸纳社区贡献的一个重大阻碍，致使整个项目的活跃度下降。
因此在去年我们决定重写这个工具，同时加入更多我们向往已久的功能。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/mysql/osc/osc.png&quot; alt=&quot;osc_archi&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-2&quot;&gt;变化和改进&lt;/h2&gt;

&lt;h3 id=&quot;section-3&quot;&gt;使用便捷&lt;/h3&gt;

&lt;p&gt;之前开源的OSC更多的像是一个概念和一段代码，本身无法直接使用。用户需要自己把核心逻辑封装成一个可执行的脚本。这个大大增加的OSC的可用度也从而导致了社区的接纳度不高。新版本的OSC.py是一个命令行可执行的脚本，很大程度上提高了易用性成为一个下载即可使用的工具。
同时，OSC.py的核心逻辑也独立成为Python Module存在。如果你的运维整体架构是基于Python搭建的那么新的OSC.py将可以很容易的融合到你的工具集当中。&lt;/p&gt;

&lt;h3 id=&quot;section-4&quot;&gt;可测试性&lt;/h3&gt;

&lt;p&gt;受到&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql-test-run&lt;/code&gt;的启发，新的OSC实现了一个类似的测试案例设计。及时是一个不懂Python的用户也可以非常容易的写出一个基于JSON+SQL的测试案例，提交一个issue来描述自己遇到的bug。同时这也使得吸纳社区patch的可靠性大幅提高。
同时受益于Python语言本身，整个工具也实现很高的单元测试覆盖度，可靠性有了很好的保障。&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;可靠性&lt;/h3&gt;

&lt;p&gt;和目前所有开源的在线表结构变更工具不同，OSC.py实现了一致性检验的功能。在Facebook数据一致性高于一切。一致性的检验可以让我们非常放心在任何时刻进行任何表结构变更而不用担心因工具bug而造成的数据丢失或者损毁。同时，一致性校验也是一种对社区用户负责的态度。MySQL的运行环境和配置参数千变万化，而Facebook的线上环境所能涵盖的只是一小部分。能在FB正常运行并不意味着这个工具就可以对bug免疫。一致性校验的存在可以让OSC.py优雅的避免各种环境变化所可能带来的潜在bug对数据的损坏。&lt;/p&gt;

&lt;p&gt;要详细了解更多OSC.py带来的新特性可以查看这个&lt;a href=&quot;https://github.com/facebookincubator/OnlineSchemaChange/wiki/Special-Things-About-OSC&quot;&gt;wiki page&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-6&quot;&gt;项目的展望&lt;/h2&gt;

&lt;p&gt;随着&lt;code class=&quot;highlighter-rouge&quot;&gt;Row Based Replication&lt;/code&gt;的普及和在Facebook内部的全面部署，我们将会增加基于RBR binlog增量记录的功能，从而完全避免trigger模式带来的性能损耗。同时，我们也将会将原生在线表结构变更的支持增加到智能模式中，在实现一个工具满足所有表结构变更的需求的同时达到最小的不可用时间。&lt;/p&gt;

&lt;p&gt;最后我们也非常希望和开源社区一起对OSC进行改进和开发，使之能成为一个更为可靠高效的DBA工具。&lt;/p&gt;

&lt;p&gt;最后附上github的repo地址：&lt;a href=&quot;https://github.com/facebookincubator/OnlineSchemaChange&quot;&gt;https://github.com/facebookincubator/OnlineSchemaChange&lt;/a&gt;&lt;/p&gt;</content><summary></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="{&quot;teaser&quot;=&gt;&quot;/teaser/osc.jpg&quot;}" /></entry><entry><title>Jekyll&amp;amp;Github Pages博客模板挑选和配置</title><link href="/mysql/choose-a-template-for-your-blog/" rel="alternate" type="text/html" title="Jekyll&amp;Github Pages博客模板挑选和配置" /><published>2015-01-04T00:00:00+08:00</published><updated>2015-01-04T00:00:00+08:00</updated><id>/mysql/choose-a-template-for-your-blog</id><content type="html" xml:base="/mysql/choose-a-template-for-your-blog/">&lt;ul id=&quot;markdown-toc&quot;&gt;
  &lt;li&gt;&lt;a href=&quot;#section&quot; id=&quot;markdown-toc-section&quot;&gt;模板挑选&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-1&quot; id=&quot;markdown-toc-section-1&quot;&gt;模板安装&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-2&quot; id=&quot;markdown-toc-section-2&quot;&gt;模板基本配置&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-3&quot; id=&quot;markdown-toc-section-3&quot;&gt;模板页头导航配置&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#section-4&quot; id=&quot;markdown-toc-section-4&quot;&gt;其他配置&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;blockquote&gt;
  &lt;p&gt;当按照上一篇&lt;a href=&quot;/jekyll/how-to-build-a-blog-using-jekyll-markdown&quot;&gt;jekyll入门教程&lt;/a&gt;步骤操作后，你就拥有了一个属于自己的免费Blog。但是界面非常的朴素甚至有时无法满足最基本的写作需求。因此本文将会简单的介绍jekyll模板的挑选和配置过程&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;section&quot;&gt;模板挑选&lt;/h2&gt;

&lt;p&gt;jekyll的模板一般会有以下几个集中挑选的地方：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://jekyllthemes.org/&quot;&gt;jekyllthemes.org&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.jekyllthemes.net/&quot;&gt;jekythemes.net&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://mademistakes.com/work/jekyll-themes/&quot;&gt;mademistakes&lt;/a&gt; （本博客就是从这位大神的多个jekyll模板中挑选的）&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;对于模板的挑选原则，博主觉得有以下几个参考点：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;github支持的jekyll插件有限，模板是否需要额外插件支持&lt;/li&gt;
  &lt;li&gt;是否支持disqus（Blog的评论区是一个基础功能）&lt;/li&gt;
  &lt;li&gt;是否支持Google AdSense（写Blog的同时能给自己带来一些额外收入当然也是不错的！2333）&lt;/li&gt;
  &lt;li&gt;配置是否简单（大部分配置是否能在YAML部分完成）&lt;/li&gt;
  &lt;li&gt;bug修复和新功能开发的速度是否稳定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;按照以上几个原则进行考评后，博主选择了&lt;a href=&quot;http://mmistakes.github.io/skinny-bones-jekyll/&quot;&gt;Skinny-Bones&lt;/a&gt;。下文也将围绕如何安装配置Skinny-Bones展开。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;模板安装&lt;/h2&gt;

&lt;p&gt;安装过程比较简单，通过&lt;code class=&quot;highlighter-rouge&quot;&gt;git clone&lt;/code&gt;将模板代码下载到本地目录中。运行&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle install&lt;/code&gt;进行依赖包安装（原理类似于python的virtualenv）。然后用&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;就可以查看模板效果了。以下是安装的过程和输出&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;michelles-mbp:Blog michellezhou&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo gem install bundler
Fetching: bundler-1.7.11.gem &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;100%&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
Successfully installed bundler-1.7.11
Parsing documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;bundler-1.7.11
Installing ri documentation &lt;span class=&quot;k&quot;&gt;for &lt;/span&gt;bundler-1.7.11
1 gem installed
michelles-mbp:skinny-bones-jekyll-master michellezhou&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;bundle install
Fetching gem metadata from https://rubygems.org/........
Using blankslate 2.1.2.4
Installing sass 3.4.7
Installing thor 0.19.1
Installing bourbon 4.0.2
Using hitimes 1.2.2
Using timers 4.0.1
Using celluloid 0.16.0
Using fast-stemmer 1.0.2
Installing classifier-reborn 2.0.2
Using coffee-script-source 1.8.0
Using execjs 2.2.2
Using coffee-script 2.3.0
Using colorator 0.1
Using ffi 1.9.6
Using jekyll-coffeescript 1.0.1
Using jekyll-gist 1.1.0
Using jekyll-paginate 1.1.0
Installing jekyll-sass-converter 1.2.1
Using rb-fsevent 0.9.4
Using rb-inotify 0.9.5
Installing listen 2.7.11
Installing jekyll-watch 1.1.2
Using kramdown 1.5.0
Using liquid 2.6.1
Installing mercenary 0.3.4
Using posix-spawn 0.3.9
Using yajl-ruby 1.1.0
Using pygments.rb 0.6.0
Installing redcarpet 3.2.0
Using safe_yaml 1.0.4
Using parslet 1.5.0
Using toml 0.1.2
Installing jekyll 2.4.0
Installing jekyll-sitemap 0.6.1
Installing neat 1.7.0
Installing octopress-hooks 2.2.1
Installing octopress-escape-code 1.0.2
Installing octopress-docs 0.0.9
Installing octopress-deploy 1.0.0
Installing titlecase 0.1.1
Installing octopress 3.0.0.rc.15
Using bundler 1.7.11
Your bundle is &lt;span class=&quot;nb&quot;&gt;complete&lt;/span&gt;!
Use &lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt;bundle show &lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;gemname]&lt;span class=&quot;sb&quot;&gt;`&lt;/span&gt; to see where a bundled gem is installed.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;这里需要特别指出的是，如果简单的通过&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;命令启动jekyll的话会有如下的报错。如前文所说模板是通过bundle安装独立的依赖包环境的，因此一定需要通过&lt;code class=&quot;highlighter-rouge&quot;&gt;bundle exec jekyll serve&lt;/code&gt;才能够使用到本目录下的依赖环境正常运行&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;michelles-mbp:skinny-bones-jekyll-master michellezhou&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;jekyll server
WARN: Unresolved specs during Gem::Specification.reset:
      redcarpet &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;~&amp;gt; 3.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      jekyll-watch &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;~&amp;gt; 1.1&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      classifier-reborn &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;~&amp;gt; 2.0&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
WARN: Clearing out unresolved specs.
Please report a bug &lt;span class=&quot;k&quot;&gt;if &lt;/span&gt;this causes problems.
/Library/Ruby/Gems/2.0.0/gems/jekyll-2.5.3/bin/jekyll:21:in block &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &amp;lt;top &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;required&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&amp;gt;&lt;span class=&quot;s1&quot;&gt;&#39;: cannot load such file -- jekyll/version (LoadError)
	from /Library/Ruby/Gems/2.0.0/gems/mercenary-0.3.5/lib/mercenary.rb:18:in program&#39;&lt;/span&gt;
	from /Library/Ruby/Gems/2.0.0/gems/jekyll-2.5.3/bin/jekyll:20:in &amp;lt;top &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;required&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&amp;gt;&lt;span class=&quot;s1&quot;&gt;&#39;
	from /usr/bin/jekyll:23:in load&#39;&lt;/span&gt;
	from /usr/bin/jekyll:23:in &amp;lt;main&amp;gt;&lt;span class=&quot;s1&quot;&gt;&#39;
michelles-mbp:skinny-bones-jekyll-master michellezhou$ bundle exec jekyll server
Configuration file: /Users/michellezhou/Blog/skinny-bones-jekyll-master/_config.yml
            Source: /Users/michellezhou/Blog/skinny-bones-jekyll-master
       Destination: /Users/michellezhou/Blog/skinny-bones-jekyll-master/_site
      Generating...
                    done.
 Auto-regeneration: enabled for &#39;&lt;/span&gt;/Users/michellezhou/Blog/skinny-bones-jekyll-master&lt;span class=&quot;s1&quot;&gt;&#39;
Configuration file: /Users/michellezhou/Blog/skinny-bones-jekyll-master/_config.yml
    Server address: http://0.0.0.0:4000/
  Server running... press ctrl-c to stop.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;section-2&quot;&gt;模板基本配置&lt;/h2&gt;

&lt;p&gt;然后就是模板的配置，配置过程相对简单。比较费时的地方就是为自己的博客挑选头像和文章简介图片（teaser）。博主这里头像用PhotoEditor将照片调整到模板推荐的&lt;code class=&quot;highlighter-rouge&quot;&gt;120x120&lt;/code&gt;大小，文章简介直接在google上搜&lt;code class=&quot;highlighter-rouge&quot;&gt;400x250&lt;/code&gt;然后将图片放置到根目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;/images/&lt;/code&gt;并进行配置即可。这里需要指出的是，如果&lt;em&gt;不是&lt;/em&gt;Github Project Page，那么这里的&lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;配置需要留空。如果将&lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt;配置成自己Blog在github的地址会给本地调试带来困难。例如还未上传到github上的image将在本地调试的时候无法访问。以下是本博客的配置文件：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;title: &lt;span class=&quot;s2&quot;&gt;&quot;cenalulu&#39;s Tech Blog&quot;&lt;/span&gt;
description: &lt;span class=&quot;s2&quot;&gt;&quot;Collection of everythings I want to record down especially for tech&quot;&lt;/span&gt;
logo: logo.jpg &lt;span class=&quot;c&quot;&gt;# 120x120 px default image used for Twitter summary card&lt;/span&gt;
teaser: teaser.jpg# 400x250 px default teaser image used &lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;image archive grid
locale:
url: 

sass:
    sass_dir: _sass
    style: compressed
permalink: /:categories/:title/
markdown: kramdown
highlighter: pygments
gems:
  - jekyll-sitemap


owner: 
  name: cenalulu（卢钧轶）
  email: cenalulu@gmail.com
  twitter: cenalulu
  google:
    ad-client:
    ad-slot:
  bio:
  avatar: bio-photo.jpg &lt;span class=&quot;c&quot;&gt;# 160x160 px image for author byline&lt;/span&gt;
disqus-shortname: cenalulu&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;下图是基本配置后的博客效果
&lt;img src=&quot;/images/jekyll/blog_preview.png&quot; alt=&quot;blog preview&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-3&quot;&gt;模板页头导航配置&lt;/h2&gt;

&lt;p&gt;只进行基本配置博客会显得比较单调。这部分介绍下页头导航栏的配置。具体配置在&lt;code class=&quot;highlighter-rouge&quot;&gt;_data/navigation.yml&lt;/code&gt;中进行。拿本博客的页头导航举例，具体语法如下：&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-yaml&quot; data-lang=&quot;yaml&quot;&gt;&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Home&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;excerpt&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 
  &lt;span class=&quot;s&quot;&gt;image&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; 

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;MySQL&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/mysql/&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Linux&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/linux/&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Python&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/python/&lt;/span&gt;

&lt;span class=&quot;pi&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;title&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;Jekyll&lt;/span&gt;
  &lt;span class=&quot;s&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;/jekyll/&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;当然光进行这样的配置，仅仅是做到了显示页头导航的作用。如果要使得点击每个页头标签能够跳转到对应分类的博文列表的话，还需要在根目录下建立和category名对应的文件夹，并在文件夹中放置一个&lt;code class=&quot;highlighter-rouge&quot;&gt;index.md&lt;/code&gt;的文件用作于分类导航页的渲染。还是拿本博客举例，可以看到页头上方有：mysql, python, linux, jekyll 四个分类。那么我们就需要在blog的根目录下手工创建四个文件夹&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;python&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;linux&lt;/code&gt;,&lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll&lt;/code&gt;，并且在这四个文件夹中都创建一个&lt;code class=&quot;highlighter-rouge&quot;&gt;index.md&lt;/code&gt;。这个文件的内容决定了每个分类的首页如何展示。当然最简单快速的方法是把根目录下的&lt;code class=&quot;highlighter-rouge&quot;&gt;index.md&lt;/code&gt;copy过来稍作修改。同时把permalink配置删掉，再把 &lt;code class=&quot;highlighter-rouge&quot;&gt;site.posts&lt;/code&gt; 改成&lt;code class=&quot;highlighter-rouge&quot;&gt;site.categories.mysql&lt;/code&gt;这里&lt;code class=&quot;highlighter-rouge&quot;&gt;mysql&lt;/code&gt;替换为对应分类的名字即可。修改后的结果如下图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/jekyll/blog_preview_with_navi.png&quot; alt=&quot;blog preview_with_navi&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;section-4&quot;&gt;其他配置&lt;/h2&gt;

&lt;p&gt;本文只是介绍的最基础的模板和安装配置过程。mmistake大神出品的模板界面风格迥异，但是配置却基本相同。详细可以参见他的&lt;a href=&quot;https://mmistakes.github.io/skinny-bones-jekyll/getting-started/&quot;&gt;配置文档&lt;/a&gt;。 而其他jekyll模板本文虽然没有涉及介绍，他们的基本安装和配置思路是基本一致的，即：下载解压，覆盖原Blog目录，基本配置，上传到github。
由于skinny bones支持的功能非常多，博客后续也还会针对各个常用功能做详细介绍。其他常用功能例如：&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;jekyll/setup-comment-for-your-blog/&quot;&gt;disqus支持&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;jekyll/jekyll-with-google-advertisement/&quot;&gt;google adsense支持&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;social share link支持等&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;当然读者也可以自己探索模板的具体配置方式，mmistake也提供了&lt;a href=&quot;https://mmistakes.github.io/skinny-bones-jekyll/getting-started/&quot;&gt;官方配置文档&lt;/a&gt;，同时也提供了&lt;a href=&quot;https://mmistakes.github.io/skinny-bones-jekyll/&quot;&gt;在线样例&lt;/a&gt;。如果读者觉得在线样例中的example page非常漂亮想要搬到自己Blog中来的话，也可以通过github的&lt;a href=&quot;https://github.com/mmistakes/skinny-bones-jekyll/tree/gh-pages&quot;&gt;gh-page branch&lt;/a&gt;来查看的具体markdown源文件的写法。&lt;/p&gt;</content><summary></summary></entry></feed>
